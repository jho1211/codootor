{
  "stats": {
    "suites": 20,
    "tests": 67,
    "passes": 67,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-08T19:27:52.689Z",
    "end": "2024-08-08T19:28:38.717Z",
    "duration": 46028,
    "testsRegistered": 67,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9b81ec5f-8eba-434f-8f2a-8930eebbcc0f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0d4f15cc-6313-4cd7-9bc7-f81632edb226",
          "title": "Tests for the Ollama backend REST API endpoints",
          "fullFile": "/usr/src/app/server/test/app.test.js",
          "file": "/test/app.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "fullTitle": "Tests for the Ollama backend REST API endpoints \"before all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testServer = server.app.listen(done);\nrequest = supertest.agent(testServer);",
              "err": {},
              "uuid": "0f932be4-bb4c-4dea-9ec7-5ed41f28fde4",
              "parentUUID": "0d4f15cc-6313-4cd7-9bc7-f81632edb226",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "fullTitle": "Tests for the Ollama backend REST API endpoints \"after all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testServer.close(done);",
              "err": {},
              "uuid": "5d607774-ca4f-4485-98db-31ba586f2246",
              "parentUUID": "0d4f15cc-6313-4cd7-9bc7-f81632edb226",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "3a545900-ac48-453c-a006-b1e6157a589b",
              "title": "Testing the POST endpoint for /code",
              "fullFile": "/usr/src/app/server/test/app.test.js",
              "file": "/test/app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Providing a regular description",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /code Providing a regular description",
                  "timedOut": false,
                  "duration": 10577,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request\n.post('/code')\n.send(two_sum_fn_desc)\n.set('Accept', 'application/json')\n.expect('Content-Type', /json/)\n.expect(200)\n.end(function(err, res) {\n    expect(res.body.llm_code).to.not.equal(null);\n    expect(res.body.llm_code).to.match(/return [\\w]+ \\+ [\\w]+/);\n    expect(res.body.llm_code).to.match(/function [\\w]+\\([\\w]+\\,[\\s]*[\\w]+\\)/);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "7eeea163-2a3a-492a-8b81-629bbc994707",
                  "parentUUID": "3a545900-ac48-453c-a006-b1e6157a589b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not providing a body",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /code Not providing a body",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/code')\n.send({})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body.error).to.equal(\"No description was provided.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "1e929ccd-a74e-4e28-8a59-4ecb8b6267b4",
                  "parentUUID": "3a545900-ac48-453c-a006-b1e6157a589b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7eeea163-2a3a-492a-8b81-629bbc994707",
                "1e929ccd-a74e-4e28-8a59-4ecb8b6267b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10579,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "2a650f2d-11fb-488e-8b78-72e69dbe5ff5",
              "title": "Testing the POST endpoint for /grade",
              "fullFile": "/usr/src/app/server/test/app.test.js",
              "file": "/test/app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Providing random description",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing random description",
                  "timedOut": false,
                  "duration": 8975,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({\"id\": 1, \"desc\": \"blah\"})\n.set({'Authorization': `Bearer ${process.env.JWT_TEST_TOKEN}`})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.results.length).to.equal(3);\n    expect(res.body.results[0].passed).to.equal(false);\n    expect(res.body.results[1].passed).to.equal(false);\n    expect(res.body.results[2].passed).to.equal(false);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "8bbb16e1-58a6-484a-8102-7c1edeec2962",
                  "parentUUID": "2a650f2d-11fb-488e-8b78-72e69dbe5ff5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Providing bad JSON body",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing bad JSON body",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({})\n.set({'Authorization': `Bearer ${process.env.JWT_TEST_TOKEN}`})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.error).to.equal(\"No description was provided.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "999a7b88-3121-4661-83ac-06e5d8ed4782",
                  "parentUUID": "2a650f2d-11fb-488e-8b78-72e69dbe5ff5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Providing invalid QID",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing invalid QID",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({\"id\": 999, \"llm_code\": \"function foo(a, b) { return a + b; }\", \"user_id\": \"75043986\"})\n.set({'Authorization': `Bearer ${process.env.JWT_TEST_TOKEN}`})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "d2f908fa-b6ca-4842-8705-fe96d26dc26e",
                  "parentUUID": "2a650f2d-11fb-488e-8b78-72e69dbe5ff5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Providing a regular, valid function for grade",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing a regular, valid function for grade",
                  "timedOut": false,
                  "duration": 6899,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({\"id\": 1, \"desc\": \"Takes two numbers and adds them together\", \"user_id\": \"75043986\"})\n.set({'Authorization': `Bearer ${process.env.JWT_TEST_TOKEN}`})\n.set('Accept', 'application/json')\n.expect('Content-Type', /json/)\n.expect(200)\n.end(function(err, res) {\n    expect(res.body).to.not.equal(null);\n    expect(res.body.results.length).to.equal(3);\n    expect(res.body.results[0].passed).to.equal(true);\n    expect(res.body.results[1].passed).to.equal(true);\n    expect(res.body.results[2].passed).to.equal(true);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "1f2732aa-471e-40c5-9866-c414bf59df10",
                  "parentUUID": "2a650f2d-11fb-488e-8b78-72e69dbe5ff5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8bbb16e1-58a6-484a-8102-7c1edeec2962",
                "999a7b88-3121-4661-83ac-06e5d8ed4782",
                "d2f908fa-b6ca-4842-8705-fe96d26dc26e",
                "1f2732aa-471e-40c5-9866-c414bf59df10"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15877,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b5866bcd-5453-4082-9b02-d276e4f610c7",
              "title": "Testing question and unit test GET endpoints",
              "fullFile": "/usr/src/app/server/test/app.test.js",
              "file": "/test/app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Fetching question 1",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching question 1",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/question/1')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body).to.not.equal(null);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "a6e53c40-0f1a-4425-84c9-6cb4c09a4a34",
                  "parentUUID": "b5866bcd-5453-4082-9b02-d276e4f610c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching a non-existant question",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching a non-existant question",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/question/ford_prefect')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.error).to.equal(\"Failed to retrieve the question.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "a59f99b5-fb8a-48be-a481-a27ccf25bee3",
                  "parentUUID": "b5866bcd-5453-4082-9b02-d276e4f610c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching unit tests for question 1",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching unit tests for question 1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/unit_tests/1')\n.end(function(err, res) {\n    expect(res.body).to.not.equal(null);\n    expect(res.body.length).to.equal(3);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "2669282b-0b11-402e-a65a-095c7b701b58",
                  "parentUUID": "b5866bcd-5453-4082-9b02-d276e4f610c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching a non-existant set of unit tests",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching a non-existant set of unit tests",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/unit_tests/ford_prefect')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.error).to.equal(\"Failed to retrieve test cases.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "411f2204-2c36-4b7b-9c74-8bea97be170d",
                  "parentUUID": "b5866bcd-5453-4082-9b02-d276e4f610c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a6e53c40-0f1a-4425-84c9-6cb4c09a4a34",
                "a59f99b5-fb8a-48be-a481-a27ccf25bee3",
                "2669282b-0b11-402e-a65a-095c7b701b58",
                "411f2204-2c36-4b7b-9c74-8bea97be170d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f77e4e0e-35da-47b8-897e-7251130e58d9",
          "title": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers",
          "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
          "file": "/test/ollama_api.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8d594083-3ee5-4e18-9495-ed4e9339d889",
              "title": "Testing the GeneratePrompt function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Basic description of a function test",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Basic description of a function test",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt(\"hello world\");\nexpect(prompt)\n.to\n.equal(\"Write me a Javascript function that has the following purpose: hello world. Only show me the code and call the function foo. Do not make it a const and do not make it an anonymous function.\")",
                  "err": {},
                  "uuid": "f80c84b7-a80c-4b99-a3a9-5b6813307f9d",
                  "parentUUID": "8d594083-3ee5-4e18-9495-ed4e9339d889",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Missing description (empty string)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Missing description (empty string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt(\"\");\nexpect(prompt)\n.to\n.equal(null)",
                  "err": {},
                  "uuid": "2c798284-aeec-4188-bf67-186d42457a03",
                  "parentUUID": "8d594083-3ee5-4e18-9495-ed4e9339d889",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Missing description (empty string)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Missing description (empty string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt(null);\nexpect(prompt)\n.to\n.equal(null)",
                  "err": {},
                  "uuid": "08cdad72-61ba-41b3-a147-a7dfc9a051a4",
                  "parentUUID": "8d594083-3ee5-4e18-9495-ed4e9339d889",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Missing description (empty string)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Missing description (empty string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt();\nexpect(prompt)\n.to\n.equal(null)",
                  "err": {},
                  "uuid": "3da965df-6536-4b82-9657-a9df11640472",
                  "parentUUID": "8d594083-3ee5-4e18-9495-ed4e9339d889",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f80c84b7-a80c-4b99-a3a9-5b6813307f9d",
                "2c798284-aeec-4188-bf67-186d42457a03",
                "08cdad72-61ba-41b3-a147-a7dfc9a051a4",
                "3da965df-6536-4b82-9657-a9df11640472"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "fdb012db-add6-4b51-9d67-9a536ddc4937",
              "title": "Testing the ParseResponse function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Regular response from LLM",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Regular response from LLM",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse(llm_two_sum_response);\nexpect(resp).to.contain('function foo');\nexpect(resp).to.not.contain(\"```\");\nexpect(resp).to.contain('return a + b');",
                  "err": {},
                  "uuid": "a42d0d07-cf18-4256-ac01-9e9a7c58f2c1",
                  "parentUUID": "fdb012db-add6-4b51-9d67-9a536ddc4937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Parsing error response from LLM",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Parsing error response from LLM",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse(null);\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "4e8f2224-e98f-443d-898c-40da4b5b5651",
                  "parentUUID": "fdb012db-add6-4b51-9d67-9a536ddc4937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Parsing undefined",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Parsing undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse();\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "b8742721-021f-4669-a143-bffec8164e59",
                  "parentUUID": "fdb012db-add6-4b51-9d67-9a536ddc4937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Parsing a weird response from LLM",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Parsing a weird response from LLM",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse(weird_llm_response);\nexpect(resp).to.contain('function');\nexpect(resp).to.not.contain(\"```\");\nexpect(resp).to.contain('toLowerCase');",
                  "err": {},
                  "uuid": "3d2ebbe9-11d2-447e-8aff-8a3ac6fbaa9f",
                  "parentUUID": "fdb012db-add6-4b51-9d67-9a536ddc4937",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a42d0d07-cf18-4256-ac01-9e9a7c58f2c1",
                "4e8f2224-e98f-443d-898c-40da4b5b5651",
                "b8742721-021f-4669-a143-bffec8164e59",
                "3d2ebbe9-11d2-447e-8aff-8a3ac6fbaa9f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "2ccb5656-6dfb-4fc9-a517-3d0f35fafe98",
              "title": "Testing the FetchResponse function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Fetching response for regular query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for regular query",
                  "timedOut": false,
                  "duration": 6058,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(two_sum_fn_desc.desc);\nexpect(resp).to.not.equal(null);\nexpect(resp.llm_code).to.contain(\"function\");\nexpect(resp.llm_code).to.contain(\"+\");",
                  "err": {},
                  "uuid": "789ef88c-3eb0-4808-96d1-95f1dfb2f677",
                  "parentUUID": "2ccb5656-6dfb-4fc9-a517-3d0f35fafe98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching response for random query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for random query",
                  "timedOut": false,
                  "duration": 5535,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(\"blah\")\nexpect(resp).to.not.equal(null);",
                  "err": {},
                  "uuid": "60cd5232-7b0e-429e-80c6-2ff5d582928e",
                  "parentUUID": "2ccb5656-6dfb-4fc9-a517-3d0f35fafe98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching response for null query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for null query",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(null);\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "e89058c1-aa0d-46e7-a025-d87bff83f43a",
                  "parentUUID": "2ccb5656-6dfb-4fc9-a517-3d0f35fafe98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching response for missing query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for missing query",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse();\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "f80a9ac2-31ae-4a3a-a0d4-b75884c0221e",
                  "parentUUID": "2ccb5656-6dfb-4fc9-a517-3d0f35fafe98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "789ef88c-3eb0-4808-96d1-95f1dfb2f677",
                "60cd5232-7b0e-429e-80c6-2ff5d582928e",
                "e89058c1-aa0d-46e7-a025-d87bff83f43a",
                "f80a9ac2-31ae-4a3a-a0d4-b75884c0221e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11593,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "aa94f996-28d5-4439-9047-45db5e01e1c2",
              "title": "Testing the isMalicious function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing malicious description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing malicious description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(malicious_fn_desc);\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "4dc0c70d-c698-4b68-88bc-06026cf1198b",
                  "parentUUID": "aa94f996-28d5-4439-9047-45db5e01e1c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing malicious description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing malicious description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(\"for(;;)\");\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "524adf46-8d83-46c7-8706-5cb185d5f614",
                  "parentUUID": "aa94f996-28d5-4439-9047-45db5e01e1c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing safe description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing safe description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(two_sum_fn_desc.desc);\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "a5625ec8-f1af-4daf-8f31-666af1ca8211",
                  "parentUUID": "aa94f996-28d5-4439-9047-45db5e01e1c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing empty description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing empty description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(\"\");\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "8ad6e094-8907-48ed-9a33-2bd2cc844bb5",
                  "parentUUID": "aa94f996-28d5-4439-9047-45db5e01e1c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing null description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing null description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(null);\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "2d02b23e-3a57-4005-944b-cea1bae0798c",
                  "parentUUID": "aa94f996-28d5-4439-9047-45db5e01e1c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing random description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing random description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(\"my name is Chris\");\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "e87e4dd3-ae61-4d03-82f1-bc495f665a11",
                  "parentUUID": "aa94f996-28d5-4439-9047-45db5e01e1c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing undefined description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing undefined description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious();\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "04f8e84b-e170-424b-8561-04afabfbfbde",
                  "parentUUID": "aa94f996-28d5-4439-9047-45db5e01e1c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4dc0c70d-c698-4b68-88bc-06026cf1198b",
                "524adf46-8d83-46c7-8706-5cb185d5f614",
                "a5625ec8-f1af-4daf-8f31-666af1ca8211",
                "8ad6e094-8907-48ed-9a33-2bd2cc844bb5",
                "2d02b23e-3a57-4005-944b-cea1bae0798c",
                "e87e4dd3-ae61-4d03-82f1-bc495f665a11",
                "04f8e84b-e170-424b-8561-04afabfbfbde"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "c698244c-67bf-4dd2-be2d-1acdbf0d3317",
              "title": "Testing the TestGeneratedCode function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing a correctly generated LLM function for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a correctly generated LLM function for Q1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo(a, b) { return a + b }\",\n    \"id\": 1\n})\n\nexpect(res.length).to.equal(3);\nexpect(res[0].passed).to.equal(true);\n    \nexpect(res[1].passed).to.equal(true);\n    \nexpect(res[2].passed).to.equal(true);",
                  "err": {},
                  "uuid": "9f82f1cd-d8c1-47b0-9755-e2a9bfac675b",
                  "parentUUID": "c698244c-67bf-4dd2-be2d-1acdbf0d3317",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a correctly generated LLM function for invalid q",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a correctly generated LLM function for invalid q",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo(a, b) { return a + b }\",\n    \"id\": 99\n})\n\nexpect(res).to.equal(null);",
                  "err": {},
                  "uuid": "9fdf492d-aafb-409e-9f44-91ebdbb06797",
                  "parentUUID": "c698244c-67bf-4dd2-be2d-1acdbf0d3317",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing an incorrectly generated LLM function for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing an incorrectly generated LLM function for Q1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo() { return; }\",\n    \"id\": 1 \n})\n    \nexpect(res.length).to.equal(3);\nexpect(res[0]).to.not.equal(null);\nexpect(res[0].passed).to.equal(false);\n    \nexpect(res[1].passed).to.equal(false);\n    \nexpect(res[2].passed).to.equal(false);",
                  "err": {},
                  "uuid": "3ff1a004-8675-4385-9b78-6fc88ea2ae90",
                  "parentUUID": "c698244c-67bf-4dd2-be2d-1acdbf0d3317",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a broken function for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a broken function for Q1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo() { , }\",\n    \"id\": 1 \n})\nconsole.log(res);\n    \nexpect(res.length).to.equal(3);\nexpect(res[0]).to.not.equal(null);\nexpect(res[0].passed).to.equal(false);\nexpect(res[1].passed).to.equal(false);\nexpect(res[2].passed).to.equal(false);\nexpect(res[0].actual_outputs[0]).to.contain(\"Code Failed to Compile: Unexpected token \\',\\'\");",
                  "err": {},
                  "uuid": "2b3569c3-d31c-4db8-a0b3-ac351ff4efc8",
                  "parentUUID": "c698244c-67bf-4dd2-be2d-1acdbf0d3317",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a function with missing parameters for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a function with missing parameters for Q1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo() { return a + b }\",\n    \"id\": 1\n})\n    \nexpect(res.length).to.equal(3);\nexpect(res[0].passed).to.equal(false);\nexpect(res[0].actual_outputs[0]).to.contain(\"a is not defined\");\nexpect(res[1].passed).to.equal(false);\nexpect(res[1].actual_outputs[0]).to.contain(\"a is not defined\");\nexpect(res[2].passed).to.equal(false);\nexpect(res[2].actual_outputs[0]).to.contain(\"a is not defined\");",
                  "err": {},
                  "uuid": "0ebd1f06-42eb-4832-aa45-e0f15ed8dd53",
                  "parentUUID": "c698244c-67bf-4dd2-be2d-1acdbf0d3317",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing improper JSON formats and undefined",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing improper JSON formats and undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.TestGeneratedCode({})).to.equal(null);\nexpect(oa.TestGeneratedCode({\"code\": \"hello\"})).to.equal(null);\nexpect(oa.TestGeneratedCode({\"id\": \"hello\"})).to.equal(null);\nexpect(oa.TestGeneratedCode({\"llm_code\": \"hello\"})).to.equal(null);\nexpect(oa.TestGeneratedCode(null)).to.equal(null);\nexpect(oa.TestGeneratedCode()).to.equal(null);",
                  "err": {},
                  "uuid": "7751bad4-7bbb-4b00-a132-dc8b5b4c4536",
                  "parentUUID": "c698244c-67bf-4dd2-be2d-1acdbf0d3317",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f82f1cd-d8c1-47b0-9755-e2a9bfac675b",
                "9fdf492d-aafb-409e-9f44-91ebdbb06797",
                "3ff1a004-8675-4385-9b78-6fc88ea2ae90",
                "2b3569c3-d31c-4db8-a0b3-ac351ff4efc8",
                "0ebd1f06-42eb-4832-aa45-e0f15ed8dd53",
                "7751bad4-7bbb-4b00-a132-dc8b5b4c4536"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 36,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "3c572a21-98c4-45f1-9cf6-9bb09b307139",
              "title": "Combining everything",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Regular test with proper query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Combining everything Regular test with proper query",
                  "timedOut": false,
                  "duration": 7756,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(two_sum_fn_desc.desc);\nexpect(resp).to.not.equal(null);\nexpect(resp.llm_code.startsWith(\"function\")).to.equal(true);\nexpect(resp.llm_code).to.match(/function(.|\\s)*\\}/);\n    \nresp.id = 1;\n\nconst graded = oa.TestGeneratedCode(resp);\nexpect(graded.length).to.equal(3);\nexpect(graded[0].passed).to.equal(true);\nexpect(graded[1].passed).to.equal(true);\nexpect(graded[2].passed).to.equal(true);",
                  "err": {},
                  "uuid": "b4e3bfe3-17c1-4594-bc95-78950fa13e60",
                  "parentUUID": "3c572a21-98c4-45f1-9cf6-9bb09b307139",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4e3bfe3-17c1-4594-bc95-78950fa13e60"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7756,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "9842d3e0-62f3-43e2-9869-33cb6c3c0505",
              "title": "Testing the getTotalScore function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing when results are null/undefined",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the getTotalScore function Testing when results are null/undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.getTotalScore()).to.equal(null);\nexpect(oa.getTotalScore(null)).to.equal(null);\nexpect(oa.getTotalScore([])).to.equal(0);",
                  "err": {},
                  "uuid": "54e90743-cdf7-49ea-a888-3dd8dd292610",
                  "parentUUID": "9842d3e0-62f3-43e2-9869-33cb6c3c0505",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing when error in testing function (i.e. errors)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the getTotalScore function Testing when error in testing function (i.e. errors)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.getTotalScore(err_results)).to.equal(0);",
                  "err": {},
                  "uuid": "6e34a1e3-d3bf-4c64-8103-88f965cec27c",
                  "parentUUID": "9842d3e0-62f3-43e2-9869-33cb6c3c0505",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing with normal results",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the getTotalScore function Testing with normal results",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.getTotalScore(normal_results)).to.equal(6);",
                  "err": {},
                  "uuid": "f74fe0f9-776b-49e8-b6cf-151e7cfe0fc1",
                  "parentUUID": "9842d3e0-62f3-43e2-9869-33cb6c3c0505",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54e90743-cdf7-49ea-a888-3dd8dd292610",
                "6e34a1e3-d3bf-4c64-8103-88f965cec27c",
                "f74fe0f9-776b-49e8-b6cf-151e7cfe0fc1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3106882e-a520-45b5-a977-0f05c60df87d",
          "title": "Tests for user_data functions",
          "fullFile": "/usr/src/app/server/test/user_data.test.js",
          "file": "/test/user_data.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Tests for user_data functions\"",
              "fullTitle": "Tests for user_data functions \"before each\" hook in \"Tests for user_data functions\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clearFolder();",
              "err": {},
              "uuid": "ae2d405d-3e8f-4741-b8ce-5438c3abbe62",
              "parentUUID": "3106882e-a520-45b5-a977-0f05c60df87d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Tests for user_data functions\"",
              "fullTitle": "Tests for user_data functions \"after all\" hook in \"Tests for user_data functions\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clearFolder();\nudata.loadUserDataOnStart(\"data\");",
              "err": {},
              "uuid": "b4105116-20f0-4dbb-9cef-050f05d009f4",
              "parentUUID": "3106882e-a520-45b5-a977-0f05c60df87d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "39646957-38de-4490-8e03-06092ea58d45",
              "title": "Testing the loadUserDataOnStart function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing an empty folder",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing an empty folder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = udata.loadUserDataOnStart(testFolderName);\nexpect(users.length).to.equal(0);",
                  "err": {},
                  "uuid": "95ecf70f-2128-4b93-af4a-2801abcc6d7d",
                  "parentUUID": "39646957-38de-4490-8e03-06092ea58d45",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a non-empty folder",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing a non-empty folder",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.initializeUserDataFile(testFolderName, user1.user_id, user1.nickname);\nconst users = udata.loadUserDataOnStart(testFolderName);\nexpect(users.length).to.equal(2);",
                  "err": {},
                  "uuid": "752e8b47-c0d5-4cff-ab58-2244b88f6fca",
                  "parentUUID": "39646957-38de-4490-8e03-06092ea58d45",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a non-existent folder",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing a non-existent folder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = udata.loadUserDataOnStart(\"nonExistentFolder\");\nexpect(users).to.equal(null);",
                  "err": {},
                  "uuid": "509e3ba3-bfaa-4df0-9efc-8be8cecb8cf3",
                  "parentUUID": "39646957-38de-4490-8e03-06092ea58d45",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing null or missing folder param",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing null or missing folder param",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = udata.loadUserDataOnStart();\nexpect(users).to.equal(null);\nconst users2 = udata.loadUserDataOnStart(null);\nexpect(users2).to.equal(null);",
                  "err": {},
                  "uuid": "ce558c6a-b0a0-48aa-bbcc-40a1a17d6143",
                  "parentUUID": "39646957-38de-4490-8e03-06092ea58d45",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95ecf70f-2128-4b93-af4a-2801abcc6d7d",
                "752e8b47-c0d5-4cff-ab58-2244b88f6fca",
                "509e3ba3-bfaa-4df0-9efc-8be8cecb8cf3",
                "ce558c6a-b0a0-48aa-bbcc-40a1a17d6143"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "eebc006a-3ea8-42b8-8bac-6a068cfd418c",
              "title": "Testing the initializeUserDataFile function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Initializing an existing user",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing an existing user",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nexpect(udata.getUsers().length).to.equal(1);\nexpect(res).to.equal(\"success\");\nres = udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nexpect(udata.getUsers().length).to.equal(1);\nexpect(res).to.equal(null);",
                  "err": {},
                  "uuid": "a77a0d14-0351-4e4b-8f1e-04b1bdd279e6",
                  "parentUUID": "eebc006a-3ea8-42b8-8bac-6a068cfd418c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing multiple users",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing multiple users",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nexpect(udata.getUsers().length).to.equal(1);\nexpect(res).to.equal(\"success\");\nres = udata.initializeUserDataFile(testFolderName, user1.user_id, user1.nickname);\nexpect(udata.getUsers().length).to.equal(2);\nexpect(res).to.equal(\"success\");",
                  "err": {},
                  "uuid": "1870439e-82aa-4e11-894f-4d19b794bb9d",
                  "parentUUID": "eebc006a-3ea8-42b8-8bac-6a068cfd418c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing with null and invalid folder",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing with null and invalid folder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(null, user0.user_id, user0.nickname);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);\nres = udata.initializeUserDataFile(\"nonExistentFolder\", user0.user_id, user0.nickname);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);",
                  "err": {},
                  "uuid": "fdef64b0-b0be-461e-893b-38f561988b88",
                  "parentUUID": "eebc006a-3ea8-42b8-8bac-6a068cfd418c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing with null/missing userid/nickname",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing with null/missing userid/nickname",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(testFolderName, null, null);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);\nres = udata.initializeUserDataFile(\"nonExistentFolder\");\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);",
                  "err": {},
                  "uuid": "d836ebab-4f85-4848-a69a-853a6977280e",
                  "parentUUID": "eebc006a-3ea8-42b8-8bac-6a068cfd418c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing with all null/missing params",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing with all null/missing params",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(null, null, null);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);\nres = udata.initializeUserDataFile();\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);",
                  "err": {},
                  "uuid": "67bfef43-03e6-4f0d-8518-16f2437e8b82",
                  "parentUUID": "eebc006a-3ea8-42b8-8bac-6a068cfd418c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a77a0d14-0351-4e4b-8f1e-04b1bdd279e6",
                "1870439e-82aa-4e11-894f-4d19b794bb9d",
                "fdef64b0-b0be-461e-893b-38f561988b88",
                "d836ebab-4f85-4848-a69a-853a6977280e",
                "67bfef43-03e6-4f0d-8518-16f2437e8b82"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "20e63ef9-e430-413d-aa54-8ae61b3ae935",
              "title": "Testing the updateUserDataFile function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Updating an existing user, correct directory",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating an existing user, correct directory",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nconst updatedUser = {\n    \"user_id\": \"1234567890\",\n    \"nickname\": \"mikey\",\n    \"questions_solved\": {\n        \"1\": 3,\n        \"2\": 2\n    },\n    \"num_points\": 5\n}\nres = udata.updateUserDataFile(testFolderName, updatedUser);\nexpect(res).to.equal(\"success\");\nconst retrievedUser = udata.getUserDataFile(testFolderName, updatedUser.user_id);\nexpect(retrievedUser.user_id).to.equal(updatedUser.user_id);\nexpect(retrievedUser.nickname).to.equal(updatedUser.nickname);\nexpect(retrievedUser.questions_solved[\"1\"]).to.equal(3);\nexpect(retrievedUser.questions_solved[\"2\"]).to.equal(2);\nexpect(retrievedUser.num_points).to.equal(5);",
                  "err": {},
                  "uuid": "cbbad72c-3254-4e87-9c32-e5a27a07e1d3",
                  "parentUUID": "20e63ef9-e430-413d-aa54-8ae61b3ae935",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updating an existing user, wrong directory",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating an existing user, wrong directory",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nconst updatedUser = {\n    \"user_id\": \"1234567890\",\n    \"nickname\": \"mikey\",\n    \"questions_solved\": {\n        \"1\": 3,\n        \"2\": 2\n    },\n    \"num_points\": 5\n}\nres = udata.updateUserDataFile(\"nonExistentFolder\", updatedUser);\nexpect(res).to.equal(null);",
                  "err": {},
                  "uuid": "272c10d3-406f-4351-b293-3795ab6f7833",
                  "parentUUID": "20e63ef9-e430-413d-aa54-8ae61b3ae935",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updating with null/undefined params",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating with null/undefined params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.updateUserDataFile(null, null)).to.equal(null);\nexpect(udata.updateUserDataFile()).to.equal(null);\nexpect(udata.updateUserDataFile(null, user0)).to.equal(null);\nexpect(udata.updateUserDataFile(testFolderName, null)).to.equal(null);",
                  "err": {},
                  "uuid": "a43c351e-ad94-47c9-9294-0c3a2c74e25c",
                  "parentUUID": "20e63ef9-e430-413d-aa54-8ae61b3ae935",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updating non-existent user, correct directory",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating non-existent user, correct directory",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedUser = {\n    \"user_id\": \"1234567890\",\n    \"nickname\": \"mikey\",\n    \"questions_solved\": {\n        \"1\": 3,\n        \"2\": 2\n    },\n    \"num_points\": 5\n}\nres = udata.updateUserDataFile(testFolderName, updatedUser);\nexpect(res).to.equal(\"success\");\nconst retrievedUser = udata.getUserDataFile(testFolderName, updatedUser.user_id);\nexpect(retrievedUser.user_id).to.equal(updatedUser.user_id);\nexpect(retrievedUser.nickname).to.equal(updatedUser.nickname);\nexpect(retrievedUser.questions_solved[\"1\"]).to.equal(3);\nexpect(retrievedUser.questions_solved[\"2\"]).to.equal(2);\nexpect(retrievedUser.num_points).to.equal(5);",
                  "err": {},
                  "uuid": "307f11d6-ea95-470f-b9a0-f792811f93ed",
                  "parentUUID": "20e63ef9-e430-413d-aa54-8ae61b3ae935",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cbbad72c-3254-4e87-9c32-e5a27a07e1d3",
                "272c10d3-406f-4351-b293-3795ab6f7833",
                "a43c351e-ad94-47c9-9294-0c3a2c74e25c",
                "307f11d6-ea95-470f-b9a0-f792811f93ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "eae10515-60a6-441e-9244-7ff6f95a076a",
              "title": "Testing the updateQuestionScore function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing null/undefined params",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing null/undefined params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.updateQuestionScore(null, null)).to.equal(null);\nexpect(udata.updateQuestionScore()).to.equal(null);\nexpect(udata.updateQuestionScore(null, newQuestionData)).to.equal(null);\nexpect(udata.updateQuestionScore(user0, null)).to.equal(null);",
                  "err": {},
                  "uuid": "8b3c5d09-6bf8-4aed-929d-6e91c920d380",
                  "parentUUID": "eae10515-60a6-441e-9244-7ff6f95a076a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing valid user, new score",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing valid user, new score",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nlet updatedUser = udata.updateQuestionScore(user, newQuestionData)\nexpect(updatedUser.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(updatedUser.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "37f99779-ec58-4aa8-8d76-6c9e6b3e9bb5",
                  "parentUUID": "eae10515-60a6-441e-9244-7ff6f95a076a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing valid user, lower score",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing valid user, lower score",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nlet updatedUser0 = udata.updateQuestionScore(user, newQuestionData);\nlet updatedUser1 = udata.updateQuestionScore(updatedUser0, newQuestionDataLower);\nexpect(updatedUser1.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(updatedUser1.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "c109714d-4d7b-4037-b03e-61b62e8f6ae8",
                  "parentUUID": "eae10515-60a6-441e-9244-7ff6f95a076a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing valid user, higher score",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing valid user, higher score",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nlet updatedUser0 = udata.updateQuestionScore(user, newQuestionData);\nlet updatedUser1 = udata.updateQuestionScore(updatedUser0, newQuestionDataHigher);\nexpect(updatedUser1.questions_solved[newQuestionData.qid]).to.equal(newQuestionDataHigher.score);\nexpect(updatedUser1.num_points).to.equal(3);",
                  "err": {},
                  "uuid": "0d76f9da-35d4-4299-9eb7-ba3568e96ce1",
                  "parentUUID": "eae10515-60a6-441e-9244-7ff6f95a076a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b3c5d09-6bf8-4aed-929d-6e91c920d380",
                "37f99779-ec58-4aa8-8d76-6c9e6b3e9bb5",
                "c109714d-4d7b-4037-b03e-61b62e8f6ae8",
                "0d76f9da-35d4-4299-9eb7-ba3568e96ce1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "14fc46b9-3e5d-4b37-9d2e-60c4691699fa",
              "title": "Testing the updatedUserFileWithNewScore function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing null/undefined params",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing null/undefined params",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.updatedUserFileWithNewScore(testFolderName, null, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(\"nonExistentFolder\", null, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(null, null, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(null, user0.user_id, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(null, null, user0.user_id)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore()).to.equal(null);",
                  "err": {},
                  "uuid": "740056d7-22de-47f8-a8d0-88931bfc39f2",
                  "parentUUID": "14fc46b9-3e5d-4b37-9d2e-60c4691699fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for a new question",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for a new question",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet res = udata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nexpect(res).to.equal(\"success\");\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(user.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "42e70a8a-c2e3-4740-b7ef-bd94cff6613b",
                  "parentUUID": "14fc46b9-3e5d-4b37-9d2e-60c4691699fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for an existing question with lower score",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for an existing question with lower score",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nlet res = udata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionDataLower);\nexpect(res).to.equal(\"success\");\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(user.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "10fe50fc-07fb-482a-a37a-452b27665101",
                  "parentUUID": "14fc46b9-3e5d-4b37-9d2e-60c4691699fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for an existing question with higher score",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for an existing question with higher score",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nlet res = udata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionDataHigher);\nexpect(res).to.equal(\"success\");\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionDataHigher.score);\nexpect(user.num_points).to.equal(3);",
                  "err": {},
                  "uuid": "917c8315-4997-4dfb-a305-7d21df51a6c4",
                  "parentUUID": "14fc46b9-3e5d-4b37-9d2e-60c4691699fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for multiple questions",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for multiple questions",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, diffQuestionData);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(user.questions_solved[diffQuestionData.qid]).to.equal(diffQuestionData.score);\nexpect(user.num_points).to.equal(5);",
                  "err": {},
                  "uuid": "11341784-2b96-4bec-920b-764b7b149979",
                  "parentUUID": "14fc46b9-3e5d-4b37-9d2e-60c4691699fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "740056d7-22de-47f8-a8d0-88931bfc39f2",
                "42e70a8a-c2e3-4740-b7ef-bd94cff6613b",
                "10fe50fc-07fb-482a-a37a-452b27665101",
                "917c8315-4997-4dfb-a305-7d21df51a6c4",
                "11341784-2b96-4bec-920b-764b7b149979"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "e4efdb46-e666-4ad9-919c-78f796028bb8",
              "title": "Testing initializeAttemptData function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing null/missing input",
                  "fullTitle": "Tests for user_data functions Testing initializeAttemptData function Testing null/missing input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.initializeAttemptData()).to.equal(null);\nexpect(udata.initializeAttemptData(null, null, null)).to.equal(null);\nexpect(udata.initializeAttemptData(attemptsFolder, null, null)).to.equal(null);\nexpect(udata.initializeAttemptData(null, 1, null)).to.equal(null);\nexpect(udata.initializeAttemptData(null, 1, user0.user_id)).to.equal(null);",
                  "err": {},
                  "uuid": "383ef558-fa8f-4069-bf11-845aeb3ee15a",
                  "parentUUID": "e4efdb46-e666-4ad9-919c-78f796028bb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing normal input",
                  "fullTitle": "Tests for user_data functions Testing initializeAttemptData function Testing normal input",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = udata.initializeAttemptData(attemptsFolder, 1, user0.user_id);\nexpect(res).to.eql([]);\nexpect(udata.getAttemptData(attemptsFolder, 1, user0.user_id)).to.eql([]);",
                  "err": {},
                  "uuid": "d84aacb9-cc73-4bd1-8b60-812e0649f1f6",
                  "parentUUID": "e4efdb46-e666-4ad9-919c-78f796028bb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing existing user",
                  "fullTitle": "Tests for user_data functions Testing initializeAttemptData function Testing existing user",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeAttemptData(attemptsFolder, 1, user0.user_id);\nexpect(udata.initializeAttemptData(attemptsFolder, 1, user0.user_id)).to.equal(null);",
                  "err": {},
                  "uuid": "ea88a47d-b605-4cf6-89c2-a43870dc5a8f",
                  "parentUUID": "e4efdb46-e666-4ad9-919c-78f796028bb8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "383ef558-fa8f-4069-bf11-845aeb3ee15a",
                "d84aacb9-cc73-4bd1-8b60-812e0649f1f6",
                "ea88a47d-b605-4cf6-89c2-a43870dc5a8f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "ebf8bf08-d168-44a3-bea7-3df8afdad47d",
              "title": "Testing addAttemptToUserData function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing null/undefined input",
                  "fullTitle": "Tests for user_data functions Testing addAttemptToUserData function Testing null/undefined input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.addAttemptToUserData(attemptsFolder, null, null, null)).to.equal(null);\nexpect(udata.addAttemptToUserData(null, user0.user_id, 1, attemptDataBadExample)).to.equal(null);\nexpect(udata.addAttemptToUserData()).to.equal(null);\nexpect(udata.addAttemptToUserData(null, null, null, null)).to.equal(null);",
                  "err": {},
                  "uuid": "e537f26a-be66-4682-8d49-b6847bc0b6da",
                  "parentUUID": "ebf8bf08-d168-44a3-bea7-3df8afdad47d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing normal input with non-existing attempt data file",
                  "fullTitle": "Tests for user_data functions Testing addAttemptToUserData function Testing normal input with non-existing attempt data file",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.addAttemptToUserData(attemptsFolder, user0.user_id, 1, attemptDataGoodExample)).to.equal(\"success\");\nconst data = udata.getAttemptData(attemptsFolder, 1, user0.user_id);\nexpect(data.length).to.equal(1);\nexpect(data[0].results.length).to.equal(3);\nexpect(data[0].desc).to.not.equal(null);",
                  "err": {},
                  "uuid": "250deffe-5762-4905-b14e-db462860d8eb",
                  "parentUUID": "ebf8bf08-d168-44a3-bea7-3df8afdad47d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing normal input with existing attempt data file",
                  "fullTitle": "Tests for user_data functions Testing addAttemptToUserData function Testing normal input with existing attempt data file",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeAttemptData(attemptsFolder, 1, user0.user_id);\nexpect(udata.addAttemptToUserData(attemptsFolder, user0.user_id, 1, attemptDataGoodExample)).to.equal(\"success\");\nconst data = udata.getAttemptData(attemptsFolder, 1, user0.user_id);\nexpect(data.length).to.equal(1);\nexpect(data[0].results.length).to.equal(3);\nexpect(data[0].desc).to.not.equal(null);",
                  "err": {},
                  "uuid": "60202479-fa53-491a-8401-6f8e4b5bf63e",
                  "parentUUID": "ebf8bf08-d168-44a3-bea7-3df8afdad47d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e537f26a-be66-4682-8d49-b6847bc0b6da",
                "250deffe-5762-4905-b14e-db462860d8eb",
                "60202479-fa53-491a-8401-6f8e4b5bf63e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.5.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}